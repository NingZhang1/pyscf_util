# coding=UTF-8
import numpy

"""

Contents
--------

::
    ReadIn_RDM1
    ReadIn_RDM2
    Local_Spin
    Spin_Spin_Correlation_Function

"""

def ReadIn_RDM1(_TaskName, _nao, _nstate, _skiprows=1):
    ''' Rean in RDM1 from the csv file generated by iCI 
    Args:
        _TaskName: the name of the task
        _nao: the number of atomic orbitals
        _nstate: the number of states
        _skiprows: the number of rows to skip, usually 1 which corresponds to the header

    Kwargs:

    Returns:
        rdm1: the 1-RDM
    '''

    filename = _TaskName + ".csv"
    state, i, j, val = numpy.loadtxt(filename, dtype=numpy.dtype('i,i,i,d'),
                                     delimiter=',', skiprows=_skiprows, unpack=True)
    rdm1 = numpy.zeros((_nstate, _nao, _nao))
    rdm1[state, i, j] = rdm1[state, j, i] = val
    return rdm1


def ReadIn_RDM2(_TaskName, _nao, _nstate, _skiprows=1):
    ''' Rean in RDM2 from the csv file generated by iCI
    Args:
        _TaskName: the name of the task
        _nao: the number of atomic orbitals
        _nstate: the number of states
        _skiprows: the number of rows to skip, usually 1 which corresponds to the header

    Kwargs:

    Returns:
        rdm2: the 2-RDM
    '''
    filename = _TaskName + ".csv"
    state, i, j, k, l, val = numpy.loadtxt(filename, dtype=numpy.dtype('i,i,i,i,i,d'),
                                           delimiter=',', skiprows=_skiprows, unpack=True)
    rdm2 = numpy.zeros((_nstate, _nao, _nao, _nao, _nao))
    rdm2[state, i, j, k, l] = rdm2[state, j, i, l, k] = val
    rdm2 = rdm2.transpose(0, 1, 4, 2, 3)
    return rdm2


def Local_Spin(rdm1, rdm2, nao_group, _print=False):
    ''' Calculate the local spin of each atom (defined by nao_group) given rdm1 and rdm2 
    Args:
        rdm1: the 1-RDM
        rdm2: the 2-RDM
        nao_group: the group of atomic orbitals

    Kwargs:
        _print: whether to print the local spin

    Returns:
        local_spin: the local spin of each atom
    '''

    natm = len(nao_group)
    nstate = rdm1.shape[0]

    local_spin = numpy.zeros((nstate, natm))

    for istate in range(nstate):

        for iatm in range(natm):

            for orb_id in nao_group[iatm]:
                local_spin[istate][iatm] += 0.75 * (
                    rdm1[istate][orb_id][orb_id] - rdm2[istate][orb_id][orb_id][orb_id][orb_id])
                # print(istate, orb_id)
                print("%15.8f %15.8f" % (
                    rdm1[istate][orb_id][orb_id], rdm2[istate][orb_id][orb_id][orb_id][orb_id]))

            for orb_id_i in nao_group[iatm]:
                for orb_id_j in nao_group[iatm]:
                    if orb_id_i == orb_id_j:
                        continue
                    local_spin[istate][iatm] -= 0.5 * (rdm2[istate][orb_id_i][orb_id_j][orb_id_j]
                                                       [orb_id_i] + 0.5 * rdm2[istate][orb_id_i][orb_id_i][orb_id_j][orb_id_j])
                    # print(istate, orb_id_i, orb_id_j)
                    print("%15.8f %15.8f" % (rdm2[istate][orb_id_i][orb_id_j][orb_id_j]
                          [orb_id_i], rdm2[istate][orb_id_i][orb_id_i][orb_id_j][orb_id_j]))

            print("----------------------------------------------------------")

    if _print:
        print("Local Spin^2")
        for istate in range(nstate):
            print("State %d" % istate)
            for iatm in range(natm):
                print("Atom %d: %20.12f" % (iatm, local_spin[istate][iatm]))

    return local_spin


def Spin_Spin_Correlation_Function(rdm1, rdm2, nao_group, _print=False):
    ''' Calculate the spin-spin correlation function given rdm1 and rdm2
    Args:
        rdm1: the 1-RDM
        rdm2: the 2-RDM
        nao_group: the group of atomic orbitals

    Kwargs:
        _print: whether to print the spin-spin correlation function

    Returns:
        Spin_Spin_Corr_Func: the spin-spin correlation function
    '''

    natm = len(nao_group)
    nstate = rdm1.shape[0]

    local_spin = Local_Spin(rdm1, rdm2, nao_group, False)

    Spin_Spin_Corr_Func = numpy.zeros((nstate, natm, natm))

    for istate in range(nstate):
        for iatm in range(natm):
            for jatm in range(natm):
                if iatm == jatm:
                    Spin_Spin_Corr_Func[istate][iatm][iatm] = local_spin[istate][iatm]
                else:
                    for orb_id_i in nao_group[iatm]:
                        for orb_id_j in nao_group[jatm]:
                            Spin_Spin_Corr_Func[istate][iatm][jatm] -= 0.5 * (
                                rdm2[istate][orb_id_i][orb_id_j][orb_id_j][orb_id_i] + 0.5 * rdm2[istate][orb_id_i][orb_id_i][orb_id_j][orb_id_j])

    if _print:
        print("Spin Spin Correlation")
        for istate in range(nstate):
            print("State %d" % istate)
            for iatm in range(natm):
                for jatm in range(natm):
                    print("%20.12f " %
                          (Spin_Spin_Corr_Func[istate][iatm][jatm]), end="")
                print("")

    return Spin_Spin_Corr_Func
